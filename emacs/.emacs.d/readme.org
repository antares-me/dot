#+AUTHOR:    Anton Salnikov
#+TITLE:     My Emacs Configuration
#+EMAIL:     antares@antares.me
#+DATE:      2017-04-25
#+LANGUAGE:  ru
#+PROPERTY: header-args :tangle init.el :comments org
#+OPTIONS: author:nil date:nil toc:nil title:nil e:nil
#+LaTeX_HEADER: \pagenumbering{gobble}
#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \setmonofont[Scale=0.7]{DejaVu Sans Mono}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \geometry{a4paper, margin=20mm}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{breaklines}


#+ATTR_LATEX: :width 5cm :align center :float t
#+ATTR_HTML: :width 110px
[[./img/emacs_icon.png]][fn:1]

* Конфигурация Emacs используя Org-Babel

*Работа над конфигом ведётся и ещё далека от завершения, так что будет ещё
  много изменений.*

В этом репозитории находятся настройки, ктороые я использую для кастомизации
Emacs. Конфигурация использует [[http://orgmode.org/][Org-Mode]], [[http://orgmode.org/worg/org-contrib/babel/][Org-Babel]] и [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate Programming]] для
управления настройками в едином файле Org Mode.

*Важно:* Для того, чтобы использовать эту конфигурацию вы должны сгенерировать
~init.el~ файл из этого файла. В следующем разделе я расскажу как это сделать.

** Как это работает

Используется один из стандартнх init файлов Emacs, =init.el= для загрузки всей
конфигурации. Предпологается, что настройки хранятся в стандартном =~/.emacs.d=
каталоге и для установки конфигурации вам нужна символическая ссылка с него на этот
каталог =emacs= (автоматически создастся если вы используете stow).
Файл =~/.emacs.d/init.el= собирается из всех блоков кода этого файла 
=~/emacs.d/readme.org=, экспортируемых в процессе, которыйназывается "tangling".
Если блок помечен как =:tangle no=, он будет пропущен.
Tangling происходит автоматически каждый раз при изменении =readme.org=, с
помощью хука, чтобы быть уверенным в синхронизации файлов.

Этот хук создаёт новый =~/.emacs.d/init.el= каждый раз при изменении этого файла.

#+BEGIN_SRC emacs-lisp
  ;; Оригинал взят отсюда
  ;; https://github.com/larstvei/dot-emacs/blob/master/init.org
  (defun antares-tangle-init ()
    "Если текущий буфер 'readme.org' блоки кода собираются и собранный файл компилируется."
    (when (or
           (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "readme.org")))
           (equal (buffer-file-name)
                  (expand-file-name "~/dot/emacs/.emacs.d/readme.org")))
      (call-process-shell-command
       "/usr/bin/emacs ~/.emacs.d/readme.org --batch --eval='(org-babel-tangle)' && notify-send -a 'Emacs' 'Emacs' 'init-файл собран'" nil 0)))
      ;; (byte-compile-file (concat user-emacs-directory "init.el")))

  (add-hook 'after-save-hook 'antares-tangle-init)
#+END_SRC

Крутая фишка такой настройки в том, что этот файл можно достаточно легко 
экспортировать как документацию в HTML, PDF или LaTeX. Например сделать 
это из Org mode можно нажав =C-c C-e=, выберите =h= и после одну из опций 
для создания HTML. В то же время это позволяет с удовольствием настраивать 
конфигурацию и легко находить настройки и управлять ими.

*** Как сгенерировать init.el-файл

Таким образом, из кода выше вы, вероятно, уже поняли команду, необходимую для
генерации ~/.emacs.d/init.el~ файла. В любом случае вам надо выполнить эту
команду в терминале, чтобы получить elisp файл из текущего файла org-mode. 

#+BEGIN_EXAMPLE bash
  $ /usr/bin/emacs ~/.emacs.d/readme.org --batch --eval='(org-babel-tangle)'
#+END_EXAMPLE

* Предустанавливаемые приложения

Тут список приложений, которые необходимо установить перед тем, как использовать
эту конфигурацию и наслаждаться всеми её возможностями.

- [[https://github.com/monochromegane/the_platinum_searcher][pt ("platinum searcher")]]
- [[http://git-scm.com/][git]]
- [[https://github.com/djcb/mu][mu]] (а также утилиту для получения почты например [[http://pyropus.ca/software/getmail/][getmail]] или [[http://offlineimap.org/][OfflineImap]])
- [[https://www.gnupg.org/][GnuPG]]
- [[http://www.latex-project.org/][LaTeX]] и [[http://pygments.org/][Pygments]] для экспорта в PDF с подсветкой синтаксиса
- [[http://www.mupdf.com/][MuPDF]] для DocView, [[http://poppler.freedesktop.org/][poppler]] для pdf-tools
- [[http://pandoc.org/][pandoc]] для ox-pandoc
- [[http://www.zx2c4.com/projects/password-store/][pass]]
- [[http://www.gzip.org/][gzip]]
- [[https://aria2.github.io/][aria2]]
- [[https://github.com/AlDanial/cloc][cloc]] для подсчёта строк кода

* Настройка пакетов
** straight
Ранее я использовал =package.el=, но после того, как узнал о этом пакете
перевёл конфигурацию на использование =straight.el= в связке с =use-package=

#+BEGIN_SRC emacs-lisp
;; Во избежание проблем с файлами более новыми, чем их байт скомпилированные
;; аналоги, лучше более медленный запуск, чем загрузка устаревших и, возможно,
;; сломанных пакетов.
(setq load-prefer-newer t)
(defvar bootstrap-version)
(defvar straight-use-package-by-default) ; для использования пакетом use-package
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

** use-package и bind-key

Макрос [[https://github.com/jwiegley/use-package][use-package]] позволяет использовать изолированные конфигурации пакетов в
настройках emacs таким образом, что конфигурация становится более производительной 
и, ну, просто аккуратно. А это позволяет нам установить автоматически те пакеты,
которые еще не установлены (с использованием ключевого слова =:straight t=) и
освобождая нас от использования пользовательского процесса начальной
загрузки.

Он поставляется также с модулем =bind-key=, который помогает нам
управлять привязками клавиш удобным способом. С помощью этих двух
утилит, работающих совместно, мы можем установить пакеты атомарно,
будучи в состоянии добавить/отключить/удалить пакеты, не вмешиваясь в другие.


#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(straight-use-package 'diminish)
(use-package use-package-ensure-system-package
:straight t)
;(eval-when-compile
;    (require 'use-package)
;)
;(require 'diminish)                ;; Если используется :diminish
;(require 'bind-key)                ;; Если используется :bind
#+END_SRC

* Встроенные возможности
** Сообщения отладки с метками времени

#+BEGIN_SRC emacs-lisp :tangle no
;; Временные метки (timestamp) в *Messages*
;; via https://www.reddit.com/r/emacs/comments/3hagxf/how_to_automatically_timestamp_messages_in/
(defun current-time-microseconds ()
  (let* ((nowtime (current-time))
         (now-ms (nth 2 nowtime)))
    (concat (format-time-string "[%Y-%m-%dT%T" nowtime) (format ".%d] " now-ms))))

(defadvice message (before test-symbol activate)
  (if (not (string-equal (ad-get-arg 0) "%s%s"))
      (let ((inhibit-read-only t)
            (deactivate-mark nil))
        (with-current-buffer (messages-buffer)
          (goto-char (point-max))
          (if (not (bolp))
              (newline))
          (insert (current-time-microseconds))))))
#+END_SRC

** Некоторые настройки по умолчанию

Значения по умолчанию, которые я считаю хорошим началом.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t                ;; Убираем экран приверствия
        initial-scratch-message nil             ;; Убираем сообщения из scratch буфера
        visible-bell t                          ;; Убираем пищалки
        apropos-do-all t                        ;; Вспомогательные команды выполняют более обширные поиски, чем по умолчанию
        large-file-warning-threshold 100000000) ;; Предупреждать только если открываемый файл больше 100MB
  ;; Убираем панели и GUI меню
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ;; Заменяем вопросы yes/no на y/n
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; Показывать пустые строки в конце (внизу) буфера
  (toggle-indicate-empty-lines)
  ;; Удалить предыдущий выбор если он перезаписывается новой вставкой
  (delete-selection-mode)
  ;; Мигающий курсор раздражает. Отключим мигание.
  (blink-cursor-mode -1)
  ;; Более тонкие границы окон
  (fringe-mode '(1 . 1))

  ;; Использование ibuffer по умолчанию
  (defalias 'list-buffers 'ibuffer)

   ;; Убедимся что UTF-8 используется везде.
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-language-environment    'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (prefer-coding-system        'utf-8)
  (set-input-method nil)

  ;; Отключим автосохранение и бэкапы
  ;; Я предпочитаю использовать дерево отмен (undo-tree) с ветвлением вместо
  ;; автосохранения файлов. Так как я использую gpg для авторизации и подписи
  ;; файлов, более безопасно не использовать резервные копии этих файлов.
  ;; Используйте DCVS и регулярно бэкапьте файлы!      
  (setq auto-save-default nil
        auto-save-list-file-prefix nil
        make-backup-files nil)

   ;; Всегда делать отступы пробелами
  (setq-default indent-tabs-mode  nil
                default-tab-width 4
                c-basic-offset 4)

  ;; Подсвечивать парные скобки, когда курсор на одной из них.
  (setq show-paren-delay 0)
  (show-paren-mode t)

  ;; Подсвечивать текущую строку
  (global-hl-line-mode 1)

  ;; Настройки строки режима
  (column-number-mode t)
  (setq size-indication-mode t)
  (which-function-mode 1)

  ;; Использовать основное выделение X сервера по умолчанию
  (setq select-enable-primary t)

  ;; backward-kill-word альтернатива Backspace:
  ;; Удалить слово целиком вместо нескольких нажатий Backspace
  ;; Для этого привяжем =backward-kill-region= к комбинации =C-w=
  (global-set-key "\C-w" 'backward-kill-word)
  ;; Теперь перепривяжем оригинальные биндинги этой комбинации к новым
  (global-set-key "\C-x\C-k" 'kill-region)
  (global-set-key "\C-c\C-k" 'kill-region)

  ;; Перенос текста на 80 символе по умолчанию (только текст)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook
            '(lambda() (set-fill-column 80)))

  ;; Настройки браузера
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chromium")

  ;; Отключим предупреждения о тесноте
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)

  ;; Установим календарь на стандарты моей страны и города
  (setq-default calendar-week-start-day  1
              calendar-latitude        51.5
              calendar-longitude       46.0
              calendar-location-name   "Саратов, Россия")

  ;; Установим информацию о пользователе по умолчанию.
  (setq user-full-name    "Salnikov Anton"
        user-mail-address "antares@antares.me")
#+END_SRC

** Временные файлы

Я люблю хранить все временные файлы и папки (cache, backups, ...) в уникальных
директориях. Так чище, меньше ошибок и проще управлять.

Сначала создадим переменную, в которую поместим путь к этой директории и если
она не существует создадим её.

#+BEGIN_SRC emacs-lisp
  (defvar antares-emacs-temporal-directory (concat user-emacs-directory "tmp/"))
  (unless (file-exists-p antares-emacs-temporal-directory)
    (make-directory antares-emacs-temporal-directory))
#+END_SRC

Сохраним все временные файлы во временных каталогах вместо того, чтобы плодить их
в $HOME директории.

#+BEGIN_SRC emacs-lisp
  (setq-default
   ;; История tramp
   tramp-persistency-file-name (concat antares-emacs-temporal-directory "tramp")
   ;; Файл закладок
   bookmark-default-file (concat antares-emacs-temporal-directory "bookmarks")
   ;; Файлы SemanticDB
   semanticdb-default-save-directory (concat antares-emacs-temporal-directory "semanticdb")
   ;; Файлы ссылок
   url-configuration-directory (concat antares-emacs-temporal-directory "url")
   ;; eshell файлы
   eshell-directory-name (concat antares-emacs-temporal-directory "eshell" ))
#+END_SRC

** История

Поддерживать историю прошлых действий в списке с разумными пределами.

#+BEGIN_SRC emacs-lisp
  (setq-default history-length 1000)
  (setq savehist-file (concat antares-emacs-temporal-directory "history")
        history-delete-duplicates t
        savehist-save-minibuffer-history 1
        savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
  (savehist-mode t)
#+END_SRC

** Недавние файлы

Recentf - это второстепенный режим, который строит список недавно открытых
файлов. Этот список автоматически сохраняется во время сеанса Emacs. Вы можете
получить доступ к этому списку через меню.

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (progn
      (setq recentf-save-file (concat antares-emacs-temporal-directory "recentf")
            recentf-max-saved-items 100
            recentf-exclude '("COMMIT_MSG" "COMMIT_EDITMSG"))
      (recentf-mode t)))
#+END_SRC

** Сохранить сессию между запусками Emacs (Desktop)

Desktop Save Mode - функция сохранения состояния Emacs от одного сеанса к другому.

#+BEGIN_SRC emacs-lisp
  ;; У меня отключен пока эта конфигурация не стабильна
  (use-package desktop
    :config
    :disabled t
    (progn
      (setq desktop-path '("~/.emacs.d/tmp/"))
      (setq desktop-dirname "~/.emacs.d/tmp/")
      (setq desktop-base-file-name "emacs-desktop")
      (setq desktop-globals-to-save
            (append '((extended-command-history . 50)
                      (file-name-history . 200)
                      (grep-history . 50)
                      (compile-history . 50)
                      (minibuffer-history . 100)
                      (query-replace-history . 100)
                      (read-expression-history . 100)
                      (regexp-history . 100)
                      (regexp-search-ring . 100)
                      (search-ring . 50)
                      (shell-command-history . 50)
                      tags-file-name
                      register-alist)))
      (desktop-save-mode 1)))
#+END_SRC

** Сохранение позиции курсора между сеансами

Сохранить позицию курсора для каждого открытого файла. Так при повторном
открытии файла, курсор будет в той позиции, в которой вы последний раз его
открыли.

#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (progn
      (setq save-place-file (concat antares-emacs-temporal-directory "saveplace.el") )
      (setq-default save-place t)))
#+END_SRC

** Цветовая схема

Тут я устанавливаю тему по-умолчанию, конечно субективное решение. Эта конфигурация
работает в терминальном и графическом режиме а также в клиент-серверном и автономном
буфере.

*Внимание: когда тестируете новую тему, сначала отключите эту
или используйте =counsel-load-theme=.*

Этот код служит для предотвращения перезагрузки темы каждый раз, когда вы
открываете новый клиент в режиме сервера (из GUI или терминала)

#+BEGIN_SRC emacs-lisp
  (defvar antares-color-theme (if (straight-use-package 'monokai-theme)
                              'monokai
                            'tango))

  (setq myGraphicModeHash (make-hash-table :test 'equal :size 2))
  (puthash "gui" t myGraphicModeHash)
  (puthash "term" t myGraphicModeHash)

  (defun emacsclient-setup-theme-function (frame)
    (let ((gui (gethash "gui" myGraphicModeHash))
          (ter (gethash "term" myGraphicModeHash)))
      (progn
        (select-frame frame)
        (when (or gui ter)
          (progn
            (load-theme antares-color-theme t)
            (if (display-graphic-p)
                (puthash "gui" nil myGraphicModeHash)
              (puthash "term" nil myGraphicModeHash))))
        (when (not (and gui ter))
          (remove-hook 'after-make-frame-functions 'emacsclient-setup-theme-function)))))

  (if (daemonp)
      (add-hook 'after-make-frame-functions 'emacsclient-setup-theme-function)
    (progn (load-theme antares-color-theme t)))
#+END_SRC

Этот код должен предоставить возможность выполнить некоторые действия после загрузки
темы, например, переопределить интерфейс в определенной теме или всегда перезагружать
тему smart-mode-line.

#+BEGIN_SRC emacs-lisp
  (defvar after-load-theme-hook nil
    "Хук, запускаемый после загрузки цветовой схемы, используя `load-theme'.")
  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Запуск `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))
#+END_SRC

** Шрифт

Используемый шрифт. Мой выбор моноширинный /Dejavu Sans Mono/ потому что он
свободный и имеет отличную поддержку Юникода, да и выглядит неплохо!

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "Fira Code" :height 110)

  ;; Установим шрифт с отличной поддержкой символов Unicode, чтобы в случае
  ;; отсутствия определённых символов в текущем шрифте показать их из 
  ;; резервного
  (set-fontset-font "fontset-default" nil
                    (font-spec :size 20 :name "Symbola"))
#+END_SRC

** Улучшенная нумерация строк

Показывает более удобные номера строк. Я не часто использую их потому, что это
очень медленная функция, но иногда она удобна.

#+BEGIN_SRC emacs-lisp
  (unless window-system
    (add-hook 'linum-before-numbering-hook
              (lambda ()
                (setq-local linum-format-fmt
                            (let ((w (length (number-to-string
                                              (count-lines (point-min) (point-max))))))
                              (concat "%" (number-to-string w) "d"))))))

  (defun antares-linum-format-func (line)
     (concat
      (propertize (format linum-format-fmt line) 'face 'linum)
      (propertize " " 'face 'linum)))

  (unless window-system
    (setq linum-format 'antares-linum-format-func))
#+END_SRC

** Показ завершающих пробелов

Показать/скрыть завершающие пробелы в буфере

#+BEGIN_SRC emacs-lisp
  ;; from http://stackoverflow.com/a/11701899/634816
  (defun antares-toggle-show-trailing-whitespace ()
    "Переключение show-trailing-whitespace между t и nil"
    (interactive)
    (setq show-trailing-whitespace (not show-trailing-whitespace)))
#+END_SRC

** Убить внутренний процесс с помощью =list process= буфера

Добавляет функционал возможности завершения процесса прямо в =list process=
буфере

#+BEGIN_src emacs-lisp :tangle no
  ;; seen at http://stackoverflow.com/a/18034042
  (defun antares-delete-process-at-point ()
    (interactive)
    (let ((process (get-text-property (point) 'tabulated-list-id)))
      (cond ((and process
                  (processp process))
             (delete-process process)
             (revert-buffer))
            (t
             (error "no process at point!")))))

  (define-key process-menu-mode-map (kbd "C-c k") 'antares-delete-process-at-point)
#+END_src

** Перемещение окон

Предоставляет больше интерактивности в передвижении окон.

#+BEGIN_SRC emacs-lisp
  (defun antares-scroll-other-window()
    (interactive)
    (scroll-other-window 1))

  (defun antares-scroll-other-window-down ()
    (interactive)
    (scroll-other-window-down 1))

  (use-package windmove)
  (use-package winner
    :config
    (winner-mode t))
#+END_SRC

** Вспомогательные функции для управления буферами

Несколько кастомных функций для управления буферами.

#+BEGIN_SRC emacs-lisp
  (defun antares-alternate-buffers ()
    "Переключение между последними двумя буферами"
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) t)))

  (defun antares-revert-buffer ()
    "Откат буфера до состояния сохранённого на диске файла"
    (interactive)
    (revert-buffer nil t))

  ;;(defun antares-kill-this-buffer ()
  ;;  "Удалить текущий буфер"
  ;;  (interactive)
  ;;  (kill-buffer (current-buffer)))

  (defun antares-diff-buffer-with-file ()
    "Сравнить текущий изменённый буфер с сохранённой версией"
    (interactive)
    (let ((diff-switches "-u"))
      (diff-buffer-with-file (current-buffer))))
#+END_SRC

** Поиск в интернете из Emacs

Эта функция использует DuckDuckGo для поиска в web из Emacs. Результат может быть
показан в браузере или в ewww. По умолчанию [[https://duckduckgo.com/bang][bang (!)]] включён в поиск, но может
быть отключен напрямую в DuckDuckGo.

#+BEGIN_SRC emacs-lisp
(defun antares-duckduckgo-search (browser)
  "Поиск в DuckDuckGo из Emacs."
  (let* ((duckduckgo-string "https://duckduckgo.com/?q=")
         (duckduckgo-prompt "sDuckDuckGo: ")
         (duckduckgo-google-bang "!g ")
         (search-string
          (cond
           ((region-active-p)
            (concat duckduckgo-google-bang
                    (buffer-substring-no-properties
                     (region-beginning) (region-end))))
           ((thing-at-point 'symbol)
            (concat duckduckgo-google-bang
                    (thing-at-point 'symbol)))
           ((thing-at-point 'word)
            (concat duckduckgo-google-bang
                    (thing-at-point 'word)))
           (t "!")))
         (search
          (concat duckduckgo-string
                  (read-from-minibuffer
                   duckduckgo-prompt search-string))))
    (if browser
        (browse-url search)
      (browse-web search))))
#+END_SRC

** Использование шифрования

Использование шифрования для защиты конфиденциальных данных. Таких как
конфигурации почтовых серверов (хранятся в =authinfo.gpg=) и пользовательских
данных.

#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :config
    (progn
      (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))))
#+END_SRC

** Сетевая безопасность

Установить уровень безопасности Emacs Network Security Manager

#+BEGIN_SRC emacs-lisp
   (setq network-security-level 'high)
#+END_SRC

** Правописание

Включаем по-умолчанию проверку правописания. Также используем [[http://hunspell.sourceforge.net/][hunspell]] вместо
[[http://www.gnu.org/software/ispell/ispell.html][ispell]] для исправлений.

#+BEGIN_SRC emacs-lisp
  (setq-default ispell-program-name    "hunspell"
                ispell-really-hunspell t
                ispell-check-comments  t
                ispell-extra-args      '("-i" "utf-8") ;; производит много шума, отключить?
                ispell-dictionary      "en_US")

  ;; Переключение между двумя наиболее часто используемыми словарями
  (defun antares-switch-dictionary ()
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "en_US") "ru_RU" "en_US")))
      (ispell-change-dictionary change)
      (message "Словарь переключен с %s на %s" dic change)))

  (defun antares-turn-on-spell-check ()
    (flyspell-mode 1))

  ;; включить проверку орфографии в определённолм режиме
  (add-hook 'markdown-mode-hook 'antares-turn-on-spell-check)
  (add-hook 'text-mode-hook     'antares-turn-on-spell-check)
  (add-hook 'org-mode-hook      'antares-turn-on-spell-check)
  (add-hook 'prog-mode-hook     'flyspell-prog-mode)
#+END_SRC

** Dired

Есть два способа, чтобы избежать использование боле одного буфера при
использовании Dired.

#+BEGIN_SRC emacs-lisp
  (use-package dired
     :init
     ;; Человеко-читаемые размеры
     (setq dired-listing-switches "-alh")
     ;; 'a' использовать текущий буфер, 'RET' открыть новый
     (put 'dired-find-alternate-file 'disabled nil)

     ;; '^' использовать текущий буфер
     (add-hook 'dired-mode-hook
               (lambda ()
                 (define-key dired-mode-map (kbd "^")
                   (lambda ()
                     (interactive)
                     (find-alternate-file ".."))))))
#+END_SRC

** Ido

Используем ido для работы с файлами и буферами удобным способом.

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (progn
      (setq ido-save-directory-list-file (concat antares-emacs-temporal-directory "ido.last")
            ido-enable-flex-matching t
            ido-use-virtual-buffers t)
      ;; (ido-mode t)
      (ido-everywhere t)))
#+END_SRC

** ediff

Более удобная конфигурация ediff по умолчанию.

#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :init
    (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally))
#+END_SRC

** eww

Настройки Emacs Web Browser.

#+BEGIN_SRC emacs-lisp
  (use-package eww
    :init
    (setq eww-download-directory (concat antares-emacs-temporal-directory "temporal"))
    :config
    (bind-keys :map eww-mode-map
               ("s" . eww-view-source)))
#+END_SRC

** Настройки Org-mode

#+BEGIN_SRC emacs-lisp :tangle no
    (use-package org
      :defer 1
      :config
      (progn
        ;; укажем модули, включённые по умолчанию
        (setq org-modules '(
            org-bbdb
            org-bibtex
            org-docview
            org-mhe
            org-rmail
            org-crypt
            org-protocol
            org-gnus
            org-id
            org-info
            org-habit
            org-irc
            org-annotate-file
            org-eval
            org-expiry
            org-man
            org-panel
            org-toc))

        ;; Настройка директории по умолчанию
        (setq org-directory "~/MEGA/org"
              org-default-notes-file (concat org-directory "/notes.org"))

        ;; Настройка архива
        (setq org-archive-location "~/MEGA/org/archive/%s_archive::datetree/** Archived")
        (setq org-agenda-custom-commands
              '(("Q" . "Custom queries") ;; gives label to "Q"
                ("Qa" "Archive search" search ""
                 ((org-agenda-files (file-expand-wildcards "~/MEGA/org/archive/*.org_archive"))))
                ;; ...Тут прочие команды
                ))

        ;; Подсветка синтаксиса в блоках кода
        (setq org-src-fontify-natively  t
              org-src-tab-acts-natively t)
        (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))

        ;; Более правильное регулярное выражение для экспорта в HTML в качестве замены Markdown
        (org-set-emph-re 'org-emphasis-regexp-components
                         '(" \t({"
                           "- \t.,:!?;)}[:multibyte:]"
                           " \t\r\n,"
                           "."
                           1))

        ;; Подсветка синтаксиса в блоках кода при экспорте в PDF
        ;; Подключим latex-exporter
        (use-package ox-latex)
        ;; Add minted to the defaults packages to include when exporting.
        (add-to-list 'org-latex-packages-alist '("" "minted"))
        (add-to-list 'org-latex-packages-alist '("" "xunicode"))
        ;; Tell the latex export to use the minted package for source
        ;; code coloration.
        (setq org-latex-listings 'minted)
        ;; Let the exporter use the -shell-escape option to let latex
        ;; execute external programs.
        ;; This obviously and can be dangerous to activate!
        (setq org-latex-pdf-process
              '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

        ;; Управление задачами
        (setq org-log-done t)
        (setq org-clock-idle-time nil)

        ;; Планировщик и дневник
        (setq org-agenda-include-diary t)
        (setq org-agenda-files '("~/MEGA/org"))
        (setq org-agenda-inhibit-startup t)

        ;; конфигурация внешних приложений для открытия файлов
        (setq org-file-apps
              '(("\\.pdf\\'" . "zathura %s")
                ("\\.gnumeric\\'" . "gnumeric %s")))

        ;; protect hidden trees for being inadvertily edited (do not work with evil)
        (setq-default org-catch-invisible-edits  'error
                      org-ctrl-k-protect-subtree 'error)

        ;; Показ картинок в тексте
        ;; работает только в GUI, но это удобная функция
        (when (window-system)
          (setq org-startup-with-inline-images t))
        ;; Ограничение ширины картинок
        (setq org-image-actual-width '(800))

        ;; :::::: Org-Babel ::::::

        ;; Поддержка языков программирования
        (org-babel-do-load-languages
         (quote org-babel-load-languages)
         (quote (
                 (calc . t)
                 (clojure . t)
                 (ditaa . t)
                 (dot . t)
                 (emacs-lisp . t)
                 (gnuplot . t)
                 (latex . t)
                 (ledger . t)
                 (octave . t)
                 (org . t)
                 (makefile . t)
                 (plantuml . t)
                 (python . t)
                 (R . t)
                 (ruby . t)
                 (sh . t)
                 (sqlite . t)
                 (sql . nil))))
        (setq org-babel-python-command "python2")

        ;; refresh images after execution
        (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

        ;; don't ask confirmation to execute "safe" languages
        (defun antares-org-confirm-babel-evaluate (lang body)
          (and (not (string= lang "ditaa"))
             (not (string= lang "dot"))
             (not (string= lang "gnuplot"))
             (not (string= lang "ledger"))
             (not (string= lang "plantuml"))))

        (setq org-confirm-babel-evaluate 'antares-org-confirm-babel-evaluate)))
#+END_SRC

* Пакеты [0/2]

Здесь я пытаюсь настроить кахдый пакет отдельно от других насколько это возможно
чтобы быть уверенным в том, что при добавлении или удалении пакета не сломается
конфигурация остальных.

** Внешний вид
*** Иконки
**** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :straight t)
#+END_SRC

*** Строка состояния
**** Powerline

[[https://github.com/milkypostman/powerline][Powerline]]
Предлагаемая версия 2.0 оригинального Emacs Powerline, которая является форком
Powerline для Vim.
Emacs версия Vim powerline.
В эту версию включена поддержка UTF-8. UTF-8 разделители будут отображаться
юникодными символами правильно, например под mintty, так долго, сколько у вас
будут установлены пропатченные шрифты.
По умолчанию все терминальные режимы Emacs используют разделители UTF-8.

#+BEGIN_SRC emacs-lisp
      (use-package powerline
        :straight t
	;;:straight moe-theme
        :defer t
	:config
	(progn
	(setq powerline-arrow-shape 'arrow)
        ;; (powerline-moe-theme)
        )
	)
    (use-package powerline-evil
        :straight t
	:straight powerline)
    ;; Выбор цвета строки состояния.(Default: blue)
    ;;(moe-theme-set-color 'cyan)
#+END_SRC

*** Темы
**** moe-theme

     [[https://github.com/kuanyui/moe-theme.el][Moe-theme]] понравившаяся мне цветовая тема.

#+BEGIN_SRC emacs-lisp
  (use-package moe-theme
    :straight t
    :after (:all powerline powerline-evil)
    :config
    (progn
      (use-package moe-theme-switcher) ;; Автоматически переключать тему в зависимости от времени суток
      ;;(load-theme 'moe-dark) ;; Установить тему принудительно 'moe-dark или 'moe-light
      ;;(moe-theme-set-color 'blue) ;; (Доступные цвета: blue, orange, green ,magenta, yellow, purple, red, cyan, w/b.)
      (setq
          ;;moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0)
          moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0)
          moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0)
          moe-theme-highlight-buffer-id t
          moe-theme-switch-by-sunrise-and-sunset t
          show-paren-style 'expression)
      (powerline-moe-theme)))
#+END_SRC

**** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (progn
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
      ;; Set the title
      (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
      ;; Set the banner
      (setq dashboard-startup-banner [VALUE])
      ;; Value can be
      ;; 'official which displays the official emacs logo
      ;; 'logo which displays an alternative emacs logo
      ;; 1, 2 or 3 which displays one of the text banners
      ;; "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever image/text you would prefer

      ;; Content is not centered by default. To center, set
      (setq dashboard-center-content t)

      ;; To disable shortcut "jump" indicators for each section, set
      (setq dashboard-show-shortcuts nil)
      (setq dashboard-items '((recents  . 5)
                              (bookmarks . 5)
                              (projects . 5)
                              (agenda . 5)
                              (registers . 5)))
      (defun dashboard-insert-custom (list-size)
        (insert "Custom text"))
      (add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
      (add-to-list 'dashboard-items '(custom) t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-navigator t)
      (setq dashboard-set-init-info t)
      (setq dashboard-set-footer nil)
      (setq show-week-agenda-p t)

      (dashboard-setup-startup-hook)
      ))
#+END_SRC
**** Random-splash-image
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package random-splash-image
    :disabled t
    :config
    (setq random-splash-image-dir (concat (getenv "HOME") "/.emacs.d/splash-images")))
#+END_SRC
*** Шрифт
**** FiraCode
#+BEGIN_SRC emacs-lisp
  (use-package fira-code-mode
    :straight t
    :custom (fira-code-mode-disabled-ligatures '("[]" "x"))  ; ligatures you don't want
    :hook prog-mode)                                         ; mode to enable fira-code-mode in
#+END_SRC
** Утилиты
*** Работа с текстом
**** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
          (setq rainbow-delimiters-max-face-count 9))
#+END_SRC
*** Поиск текста
**** TODO ag

  [[./img/ag.png]]

  [[https://github.com/Wilfred/ag.el][ag.el]] простой фронтенд Emacs для ag, ("the silver searcher" замена ack).

  #+BEGIN_SRC emacs-lisp
    (use-package ag
      :straight t
      :ensure-system-package (ag . silver-searcher-git)
      :defer 1
      :config
      (progn
        (setq ag-reuse-buffers 't
              ag-highlight-search t
              ag-arguments (list "--color" "--smart-case" "--nogroup" "--column" "--all-types" "--"))))
  #+END_SRC
    
*** Разметка
**** Markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :straight t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))
#+END_SRC
** Программирование
*** Go
**** Go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :straight t
    :config
    (progn
        (setq gofmt-command "goimports")
        (add-hook 'before-save-hook 'gofmt-before-save)
        (add-hook 'go-mode-hook 'go-eldoc-setup)
;;        (add-hook 'go-mode-hook 'yas-minor-mode)
        (add-hook 'go-mode-hook (lambda ()
            (set (make-local-variable 'company-backends) '(company-go))
            (company-mode)))
        (add-hook 'go-mode-hook 'flycheck-mode)
        (setq multi-compile-alist '(
            (go-mode . (
            ("go-build" "go build -v"
            (locate-dominating-file buffer-file-name ".git"))
            ("go-build-and-run" "go build -v && echo 'build finish' && eval ./${PWD##*/}"
            (multi-compile-locate-file-dir ".git"))))))
    )
    :mode ("\\.go\\'" . go-mode))
#+END_SRC

**** Golint
#+BEGIN_SRC emacs-lisp
  (use-package golint
    :straight t
    :mode ("\\.go\\'" . go-mode))
#+END_SRC

**** Go-eldoc
#+BEGIN_SRC emacs-lisp
  (use-package go-eldoc
    :straight t
    :init
        (add-hook 'go-mode-hook 'go-eldoc-setup)
    :mode ("\\.go\\'" . go-mode))
#+END_SRC
**** Company-go
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company-go
    :init
    (add-hook 'go-mode-hook (lambda ()
                              (set (make-local-variable 'company-backends) '(company-go))
                              (company-mode))))
#+END_SRC
**** Go-direx
#+BEGIN_SRC emacs-lisp
  (use-package go-direx
    :straight t
    :config
    ;;(bind-keys :map go-mode-map
    ;;("s" . go-direx-pop-to-buffer))
    :mode ("\\.go\\'" . go-mode))
#+END_SRC
*** Emacs
**** TODO bug-hunter

[[./img/bug_hunter.png]]

[[https://github.com/Malabarba/elisp-bug-hunter][The Bug Hunter]] библиотека Emacs, которая ищет источник ошибки или
неожиданного поведения внутри elisp файла конфигурации (обычно =init.el= или
=.emacs=).

#+BEGIN_SRC emacs-lisp
  (use-package bug-hunter
    :straight t
    :commands (bug-hunter-file bug-hunter-init-file))
#+END_SRC

*** PHP
**** TODO php

Режим [[https://github.com/ejmr/php-mode][PHP]] является основной режим для редактирования исходного кода PHP.
Это расширение режима C. Таким образом, он наследует все функциональные
возможности навигации C режима, но подсветка соответствует грамматике PHP и
углублена в соответствии с рекомендациями кодирования PEAR. Она также включает в
себя пару удобных функций IDE-типа, такие как поиск документации и просмотрщик
исходников и классов.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package php-mode
    :straight t
    :mode ("\\.php\\'" . php-mode)
    :interpreter ("php" . php-mode))
#+END_SRC

**** TODO php-cs-fixer

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package php-cs-fixer
    :straight t
    :mode ("\\.php\\'" . php-mode)
    :interpreter ("php" . php-mode))
#+END_SRC

**** TODO ac-php

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ac-php
    :straight t)
#+END_SRC

** DevOps
*** Docker
**** Docker

[[https://github.com/Silex/docker.el][docker]] интеграция Emacs и Docker
Поддерживает containers, images, volumes, networks, docker-machine и docker-compose.

#+BEGIN_SRC emacs-lisp
(use-package docker
  :straight t
  :bind ("C-c d" . docker))
#+END_SRC

**** Docker-compose-mode
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode
     :straight t)
#+END_SRC

**** Dockerfile-mode
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
     :straight t)
#+END_SRC

** async

[[https://github.com/jwiegley/emacs-async][async.el]] модуль для создания асинхронных процессов в Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package async
    :defer t
    :straight t
    :config
    (setq async-bytecomp-package-mode t))
#+END_SRC

** beacon

[[https://github.com/Malabarba/beacon][Beacon]] дополнительный режим, который помогает в поиске курсора.

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :straight t
    :config
    (beacon-mode 1)
    (setq beacon-push-mark 35
          beacon-blink-when-focused t
          beacon-color "deep sky blue"))
#+END_SRC

** charmap

[[./img/charmap.png]]

[[https://github.com/lateau/charmap][Charmap]] просмотр таблицы Unicode для Emacs.
С помощью CharMap можно посмотреть таблицу Unicode основанную на стандарте Unicode 6.2.

#+BEGIN_SRC emacs-lisp
   (use-package charmap
     :commands charmap
     :defer t
     :straight t
     :config
     (setq charmap-text-scale-adjust 2))
#+END_SRC

** cloc

[[./img/cloc.png]]

[[https://github.com/cosmicexplorer/cloc-emacs][cloc]] количество строк кода в буфере

#+BEGIN_SRC emacs-lisp
  (use-package cloc
    :straight t
    :ensure-system-package cloc
    :commands cloc)
#+END_SRC

** company-mode
   
#+BEGIN_SRC emacs-lisp
    (use-package company
      :straight t
      :init
      (progn
      (add-hook 'after-init-hook 'global-company-mode))
    )
#+END_SRC

** csv-mode

[[https://github.com/emacsmirror/csv-mode][csv-mode]] основной режим для редактирования значений, разделённых запятой/символом.

| Binding | Call                    | Do                                                                     |
|---------+-------------------------+------------------------------------------------------------------------|
| C-c C-v | csv-toggle-invisibility | Toggle invisibility of field separators when aligned                   |
| C-c C-t | csv-transpose           | Rewrite rows (which may have different lengths) as columns             |
| C-c C-c | csv-set-comment-start   | Set comment start for this CSV mode buffer to STRING                   |
| C-c C-u | csv-unalign-fields      | Undo soft alignment and optionally remove redundant white space        |
| C-c C-a | csv-align-fields        | Align all the fields in the region to form columns                     |
| C-c C-z | csv-yank-as-new-table   | Yank fields as a new table starting at point                           |
| C-c C-y | csv-yank-fields         | Yank fields as the ARGth field of each line in the region              |
| C-c C-k | csv-kill-fields         | Kill specified fields of each line in the region                       |
| C-c C-d | csv-toggle-descending   | Toggle csv descending sort ordering                                    |
| C-c C-r | csv-reverse-region      | Reverse the order of the lines in the region                           |
| C-c C-n | csv-sort-numeric-fields | Sort lines in region numerically by the ARGth field of each line       |
| C-c C-s | csv-sort-fields         | Sort lines in region lexicographically by the ARGth field of each line |
|---------+-------------------------+------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp
    (use-package csv-mode
      :straight t
      :mode "\\.csv\\'")
#+END_SRC

** define-word

[[https://github.com/abo-abo/define-word][define-word]] пакет GNU Emacs, позволяющий увидеть определение слова или фразы
в точке, без необходимости переключаться в браузер.

#+BEGIN_SRC emacs-lisp
  (use-package define-word
    :straight t)
#+END_SRC
** devdocs
 
[[https://github.com/xuchunyang/DevDocs.el][devdocs]] пакет Emacs, позволяющий легко искать документацию на [[https://devdocs.io][DevDocs]].
 
#+BEGIN_SRC emacs-lisp 
  (use-package devdocs 
    :straight t) 
#+END_SRC 
** diff-hl

[[https://github.com/dgutov/diff-hl][diff-hl]] подсвечивает незакоммиченные изменения с левой стороны окна,
позволяет перемещаться между ними и выборочно откатить их.

| Bind    | Call                   | Do                                                                  |
|---------+------------------------+---------------------------------------------------------------------|
| C-x v = | diff-hl-diff-goto-hunk | Run VC diff command and go to the line corresponding to the current |
| C-x v n | diff-hl-revert-hunk    | Revert the diff hunk with changes at or above the point             |
| C-x v [ | diff-hl-previous-hunk  | Go to the beginning of the previous hunk in the current buffer      |
| C-x v ] | diff-hl-next-hunk      | Go to the beginning of the next hunk in the current buffer          |
|---------+------------------------+---------------------------------------------------------------------|

#+begin_src emacs-lisp
(use-package diff-hl
    :straight t
    :defer t
    :init
    (progn
      (add-hook 'dired-mode-hook  'diff-hl-dired-mode)
      (add-hook 'org-mode-hook    'turn-on-diff-hl-mode)
      (add-hook 'prog-mode-hook   'turn-on-diff-hl-mode)
      (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)))
#+end_src

** elfeed

[[https://github.com/skeeto/elfeed][Elfeed]] предоставляет расширяемую читалку лент новостей для Emacs с поддержкой Atom и RSS

*Режим поиска*

[[./img/elfeed.png]]

*Режим просмотра*

[[./img/elfeed_show.png]]

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :straight t
    :commands elfeed
    :config
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "4 weeks ago"
                                  :remove 'unread))
    (setq elfeed-db-directory  (concat antares-emacs-temporal-directory "elfeed")
          elfeed-search-filter "@4-weeks-old +unread "
          elfeed-search-title-max-width 100)
    (setq elfeed-feeds
          '(
            ("https://geektimes.ru/rss/" geektimes)
            ("https://habrahabr.ru/rss/all/" habrahabr)
            ("http://archlinux.org.ru/news/feed/" arch)
            ("http://endlessparentheses.com/atom.xml" emacs)
            ("http://planet.emacsen.org/atom.xml" emacs)
            ("https://www.reddit.com/r/emacs/.rss" emacs)
            ("https://www.reddit.com/r/orgmode/.rss" emacs)
            ("http://www.blackhats.es/wordpress/?p=670" emacs)
            ("http://www.howardism.org/index.xml" emacs)
            ("http://www.masteringemacs.org/feed/" emacs)))
    (bind-keys :map elfeed-search-mode-map
               ("a"   .  elfeed-search-update--force)
               ("A"   .  elfeed-update)
               ("d"   .  elfeed-unjam)
               ("o"   .  elfeed-search-browse-url)
               ("j"   .  next-line)
               ("k"   .  previous-line)
               ("g"   .  beginning-of-buffer)
               ("G"   .  end-of-buffer)
               ("v"   .  set-mark-command)
               ("<escape>" .  keyboard-quit))
    (bind-keys :map elfeed-show-mode-map
               ("j"     . elfeed-show-next)
               ("k"     . elfeed-show-prev)
               ("o"     . elfeed-show-visit)
               ("<escape>" .  keyboard-quit)
               ("SPC"   . scroll-up)
               ("S-SPC" . scroll-down)
               ("TAB"   . shr-next-link)
               ("S-TAB" . shr-previous-link))

    (when (straight-use-package 'hydra)
        (bind-keys :map elfeed-search-mode-map
               ("\\"   . hydra-elfeed-search/body))
        (bind-keys :map elfeed-show-mode-map
               ("\\"   . hydra-elfeed-show/body))
        (eval-and-compile
          (defhydra hydra-elfeed-common (:color blue)
            ("\\" hydra-master/body "back")
            ("<ESC>" nil "quit")))

        (defhydra hydra-elfeed-search (:hint nil :color blue :inherit (hydra-elfeed-common/heads))
          "
                                                                        ╭────────┐
    Move   Filter     Entries        Tags          Do                   │ Elfeed │
  ╭─────────────────────────────────────────────────────────────────────┴────────╯
    _p_/_k_    [_s_] live   [_RET_] view     [_r_] read      [_a_] refresh
    ^ ^↑^ ^    [_S_] set    [_o_] browse     [_u_] unread    [_A_] fetch
    ^ ^ ^ ^     ^ ^         [_y_] yank url   [_+_] add       [_d_] unjam
    ^ ^↓^ ^     ^ ^         [_v_] mark       [_-_] remove    [_E_] edit feeds
    _n_/_j_     ^ ^          ^ ^              ^ ^            [_q_] exit
  --------------------------------------------------------------------------------
          "
          ("q"    quit-window)
          ("a"    elfeed-search-update--force)
          ("A"    elfeed-update)
          ("d"    elfeed-unjam)
          ("s"    elfeed-search-live-filter)
          ("S"    elfeed-search-set-filter)
          ("RET"  elfeed-search-show-entry)
          ("o"    elfeed-search-browse-url)
          ("y"    elfeed-search-yank)
          ("v"    set-mark-command)
          ("n"    next-line :color red)
          ("j"    next-line :color red)
          ("p"    previous-line :color red)
          ("k"    previous-line :color red)
          ("r"    elfeed-search-untag-all-unread)
          ("u"    elfeed-search-tag-all-unread)
          ("E"    (lambda() (interactive)(find-file "~/.emacs.d/elfeed.el.gpg")))
          ("+"    elfeed-search-tag-all)
          ("-"    elfeed-search-untag-all))

      (defhydra hydra-elfeed-show (:hint nil :color blue)
          "
                                                                        ╭────────┐
    Scroll       Entries        Tags          Links                     │ Elfeed │
  ╭─────────────────────────────────────────────────────────────────────┴────────╯
    _S-SPC_    _p_/_k_  [_g_] refresh   [_u_] unread    _S-TAB_
    ^  ↑  ^    ^ ^↑^ ^  [_o_] browse    [_+_] add       ^  ↑  ^
    ^     ^    ^ ^ ^ ^  [_y_] yank url  [_-_] remove    ^     ^
    ^  ↓  ^    ^ ^↓^ ^  [_q_] quit       ^ ^            ^  ↓  ^
     _SPC_     _n_/_j_  [_s_] quit & search^^            _TAB_
  --------------------------------------------------------------------------------
          "
          ("q"     elfeed-kill-buffer)
          ("g"     elfeed-show-refresh)
          ("n"     elfeed-show-next :color red)
          ("j"     elfeed-show-next :color red)
          ("p"     elfeed-show-prev :color red)
          ("k"     elfeed-show-prev :color red)
          ("s"     elfeed-show-new-live-search)
          ("o"     elfeed-show-visit)
          ("y"     elfeed-show-yank)
          ("u"     (elfeed-show-tag 'unread))
          ("+"     elfeed-show-tag)
          ("-"     elfeed-show-untag)
          ("SPC"   scroll-up :color red)
          ("S-SPC" scroll-down :color red)
          ("TAB"   shr-next-link :color red)
          ("S-TAB" shr-previous-link :color red))))
#+END_SRC

** emogify
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :straight t
  :init (global-emojify-mode 1)
  :config
  (if (display-graphic-p)
      (setq emojify-display-style 'image)
    (setq emojify-display-style 'unicode)))
#+END_SRC
** Esup
Esup is a package for benchmark Emacs startup time without ever leaving your Emacs.

#+BEGIN_SRC emacs-lisp
(use-package esup
  :straight t
  :commands esup)
#+END_SRC

** evil

[[https://gitorious.org/evil/pages/Home][Evil]] расширяемый vi слой для Emacs. Он эмулирует основные особенности Vim,
а также предоставляет средства для написания пользовательских расширений.

| Binding | Call                        | Do                                         |
|---------+-----------------------------+--------------------------------------------|
| C-z     | evil-emacs-state            | Переключить evil-mode                      |
| \       | evil-execute-in-emacs-state | Выполнить следующую команду в режиме emacs |
|---------+-----------------------------+--------------------------------------------|

[[https://github.com/Dewdrops/evil-exchange][Evil-exchange]] простой оператор изменения текста для Evil.
Это порт [[https://github.com/tommcdo/vim-exchange][vim-exchange]] от Tom McDonald.

| Binding | Call                 | Do                                                    |
|---------+----------------------+-------------------------------------------------------|
| gx      | evil-exchange        | Define (and highlight) the first {motion} to exchange |
| gX      | evil-exchange-cancel | Clear any {motion} pending for exchange.              |
|---------+----------------------+-------------------------------------------------------|

[[https://github.com/cofi/evil-indent-textobject][evil-indent-textobject]] текстовый объект evil на основе отступа.

| textobject | Do                                                                     |
|------------+------------------------------------------------------------------------|
| ii         | Inner Indentation: the surrounding textblock with the same indentation |
| ai         | Above & Indentation: ii + the line above with a different indentation  |
| aI         | Above & Indentation+: ai + the line below with a different indentation |
|------------+------------------------------------------------------------------------|

Используем пакет [[https://github.com/redguardtoo/evil-matchit][Matchit]], эквивалентный Vim.

| Binding | Call              | Do                                    |
|---------+-------------------+---------------------------------------|
| %       | evilmi-jump-items | Переключаемся между элементами/тэгами |
|---------+-------------------+---------------------------------------|

[[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] комментирует/раскомментируетстроки эффективно. Как Nerd Commenter в Vim

Используем пакет [[https://github.com/timcharper/evil-surround][evil-surround]], эквивалентный Vim.

| Binding | Do                                          |
|---------+---------------------------------------------|
| ys      | создать обрамление ('мой текст')            |
| cs      | изменить обрамление                         |
| ds      | удалить обрамление                          |
| S       | для создания обрамления в визуальном режиме |
|---------+---------------------------------------------|

[[https://github.com/victorhge/iedit][iedit]] позволяет редактировать одно вхождение какого-нибудь текста в буфере
или области и одновременно редактировать другие вхождения таким же образом, с
визуальной обратной связью по мере ввода.
[[https://github.com/magnars/expand-region.el][Expand region]] увеличивает выделенную область с помощью смысловых едениц.
Просто продолжайте нажимать клавишу, пока он не выберет то, что вы хотите.
[[https://github.com/syl20bnr/evil-iedit-state][evil-iedit-state]] выделение в Evil для iedit и расширенной области.


#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :config
    (progn
      (defcustom antares-evil-state-modes
      '(fundamental-mode
        text-mode
        prog-mode
        term-mode
        conf-mode
        web-mode)
      "Список режимов, которые должны запускаться в статусе Evil."
      :type '(symbol))

      (defcustom antares-emacs-state-modes
      '(debugger-mode
        process-menu-mode
        pdf-view-mode
        doc-view-mode
        eww-mode
        epresent-mode
        elfeed-show-mode
        elfeed-search-mode
        sx-question-mode
        sx-question-list-mode
        paradox-menu-mode
        package-menu-mode
        archive-mode
        irfc-mode
        git-commit-mode
        git-rebase-mode)
      "Список режимов, которые должны запускаться в Evil Emacs статусе."
      :type '(symbol))

      ;; Улучшенные отступы
      (define-key evil-insert-state-map (kbd "RET") 'newline-and-indent)

      ;; esc выходит почти отовсюду (взято с)
      ;; http://stackoverflow.com/questions/8483182/emacs-evil-mode-best-practice,;;
      ;; попытка эмуляции поведения Vim
      ;; (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

      ;; Изменим цвет курсора в зависимости от режима
      (setq evil-emacs-state-cursor    '("red" box)
            evil-normal-state-cursor   '("lawn green" box)
            evil-visual-state-cursor   '("orange" box)
            evil-insert-state-cursor   '("deep sky blue" bar)
            evil-replace-state-cursor  '("red" bar)
            evil-operator-state-cursor '("red" hollow))

      (defun antares-major-mode-evil-state-adjust ()
        (cond ((member major-mode antares-evil-state-modes) (turn-on-evil-mode))
              ((member major-mode antares-emacs-state-modes) (turn-off-evil-mode))
              ((apply 'derived-mode-p antares-evil-state-modes) (turn-on-evil-mode))
              ((apply 'derived-mode-p antares-emacs-state-modes) (turn-off-evil-mode))))

      (add-hook 'after-change-major-mode-hook #'antares-major-mode-evil-state-adjust)

      ;; определение новых текстовых объектов
      ;; взято из http://stackoverflow.com/a/22418983/634816
      (defmacro antares-define-and-bind-text-object (key start-regex end-regex)
        (let ((inner-name (make-symbol "inner-name"))
              (outer-name (make-symbol "outer-name")))
          `(progn
             (evil-define-text-object ,inner-name (count &optional beg end type)
               (evil-select-paren ,start-regex ,end-regex beg end type count nil))
             (evil-define-text-object ,outer-name (count &optional beg end type)
               (evil-select-paren ,start-regex ,end-regex beg end type count t))
             (define-key evil-inner-text-objects-map ,key (quote ,inner-name))
             (define-key evil-outer-text-objects-map ,key (quote ,outer-name)))))

      ;; между знаками подчёркивания:
      (antares-define-and-bind-text-object "_" "_" "_")
      ;; вся строка:
      (antares-define-and-bind-text-object "l" "^" "$")
      ;; между знаками доллара:
      (antares-define-and-bind-text-object "$" "\\$" "\\$")
      ;; между вертикальных черт:
      (antares-define-and-bind-text-object "|" "|" "|")

      ;; пользовательские привязки для /Org-mode/.
      (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
      (evil-define-key 'normal org-mode-map (kbd "H") 'org-metaleft)
      (evil-define-key 'normal org-mode-map (kbd "L") 'org-metaright)
      (evil-define-key 'normal org-mode-map (kbd "K") 'org-metaup)
      (evil-define-key 'normal org-mode-map (kbd "J") 'org-metadown)
      (evil-define-key 'normal org-mode-map (kbd "U") 'org-shiftmetaleft)
      (evil-define-key 'normal org-mode-map (kbd "I") 'org-shiftmetaright)
      (evil-define-key 'normal org-mode-map (kbd "O") 'org-shiftmetaup)
      (evil-define-key 'normal org-mode-map (kbd "P") 'org-shiftmetadown)
      (evil-define-key 'normal org-mode-map (kbd "t")   'org-todo)
      (evil-define-key 'normal org-mode-map (kbd "-")   'org-cycle-list-bullet)

      (evil-define-key 'insert org-mode-map (kbd "C-c .")
        '(lambda () (interactive) (org-time-stamp-inactive t)))

      ;; NeoTree
      (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
      (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
      (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
      (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
      (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
      (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
      (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
      (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
      (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle))


      ;; привязки, используемые с пакетом hydra
      (when (straight-use-package 'hydra)
        (define-key evil-motion-state-map "\\" 'hydra-master/body)
        (define-key evil-normal-state-map ","  'hydra-leader/body)
        (define-key evil-visual-state-map ","  'hydra-leader/body))

      (use-package evil-exchange
        :straight t
        :config
        (evil-exchange-install))

      (use-package evil-indent-textobject
        :straight t)

      (use-package evil-matchit
        :straight t
        :config
        (global-evil-matchit-mode t))

      ;; (use-package evil-nerd-commenter
      ;;   :straight t
      ;;   :init
      ;;   (setq evilnc-hotkey-comment-operator ""))

      (use-package evil-iedit-state
        :straight t
        :straight expand-region
        :config
        (add-hook 'iedit-mode-hook 'evil-iedit-state)
        (when (straight-use-package 'hydra)
          (bind-keys :map evil-iedit-state-map
                     ("\\" . hydra-iedit/body))
          (bind-keys :map evil-iedit-insert-state-map
                     ("\\" . hydra-iedit-insert/body))
          (defhydra hydra-iedit (:color blue :hint nil)
            "
                                                                           ╭───────┐
      Occurrences                            Scope                         │ iedit │
    ╭──────────────────────────────────────────────────────────────────────┴───────╯
       ^ ^  _gg_        [_tab_]^ toggle                         _J_
       ^ ^  ^ ↑ ^       [_\#_]   number all                     ^↑^
       ^ ^   _N_        [_D_]  ^ delete all                 _L_ine|_F_unction
       ^ ^  ^ ↑ ^       [_S_]  ^ substitute all                 ^↓^
       _0_ ←^   ^→ $    [_I_]  ^ insert at beginning            _K_
       ^ ^  ^ ↓ ^       [_A_]  ^ append at the end
       ^ ^   _n_        [_p_]  ^ replace with yank
       ^ ^  ^ ↓ ^       [_U_]  ^ up-case all
       ^ ^   _G_        [_C-U_]^ down-case all
       ^ ^   ^ ^        [_V_]  ^ toggle lines
    --------------------------------------------------------------------------------
            "
            ("<esc>" nil "quit")
            ( "#"         iedit-number-occurrences)
            ( "\$"         evil-iedit-state/evil-end-of-line)
            ( "0"         evil-iedit-state/evil-beginning-of-line)
            ( "a"         evil-iedit-state/evil-append)
            ( "A"         evil-iedit-state/evil-append-line)
            ( "c"         evil-iedit-state/evil-change)
            ( "D"         iedit-delete-occurrences)
            ( "F"         iedit-restrict-function)
            ( "gg"        iedit-goto-first-occurrence)
            ( "G"         iedit-goto-last-occurrence)
            ( "i"         evil-iedit-insert-state)
            ( "I"         evil-iedit-state/evil-insert-line)
            ( "J"         iedit-expand-down-a-line)
            ( "K"         iedit-expand-up-a-line)
            ( "L"         iedit-restrict-current-line)
            ( "n"         iedit-next-occurrence)
            ( "N"         iedit-prev-occurrence)
            ( "o"         evil-iedit-state/evil-open-below)
            ( "O"         evil-iedit-state/evil-open-above)
            ( "p"         evil-iedit-state/paste-replace)
            ( "s"         evil-iedit-state/evil-substitute)
            ( "S"         evil-iedit-state/substitute)
            ( "V"         iedit-toggle-unmatched-lines-visible)
            ( "U"         iedit-upcase-occurrences)
            ( "C-U"       iedit-downcase-occurrences)
            ( "C-g"       evil-iedit-state/quit-iedit-mode)
            ( "tab"       iedit-toggle-selection)
            ( "backspace" iedit-blank-occurrences)
            ( "escape"    evil-iedit-state/quit-iedit-mode))

          (defhydra hydra-iedit-insert (:color blue :hint nil)
            "
                                                                           ╭───────┐
                                                                           │ iedit │
    ╭──────────────────────────────────────────────────────────────────────┴───────╯
    --------------------------------------------------------------------------------
            "
            ("<esc>" nil "quit"))))

      (use-package evil-surround
        :straight t
        :config
        (global-evil-surround-mode 1)))
#+END_SRC

** exec-path-from-shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :config
    (progn
    (setq exec-path-from-shell-shell-name "zsh")
    (setq exec-path-from-shell-check-startup-files nil)
    (setq exec-path-from-shell-arguments '("-l"))
    (when (daemonp)
    (exec-path-from-shell-initialize))
    (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))))
#+END_SRC
** fill-column-indicator

[[https://github.com/alpaker/Fill-Column-Indicator][fill-column-indicator]] переключает вертикальный столбец, указывающий на заполнение строки.

#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :straight t
    :commands fci-mode
    :config
    (setq fci-rule-column 79)
    (fci-mode))
#+END_SRC
** TODO fixmee                                                            
 
[[https://github.com/rolandwalker/fixmee][fixmee]] для быстрой навигации к FIXME и TODO меткам в Emacs.
 
| Binding | Call                             | Do                                       |
|---------+----------------------------------+------------------------------------------|
| C-c f   | fixmee-goto-nextmost-urgent      | Go to the next TODO/FIXME                |
| C-c F   | fixmee-goto-prevmost-urgent      | Go to the previous TODO/FIXME            |
| C-c v   | fixmee-view-listing              | View the list of TODOs                   |
| M-n     | fixmee-goto-next-by-position     | Go to the next TODO/FIXME (above a TODO) |
| M-p     | fixmee-goto-previous-by-position | Go to the next TODO/FIXME (above a TODO) |
 
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package fixmee 
    :ensure pcache 
    :straight t 
    :diminish fixmee-mode 
    :commands (fixmee-mode fixmee-view-listing) 
    :init 
    (setq pcache-directory (concat antares-emacs-temporal-directory "pcache"))   
    (add-hook 'prog-mode-hook 'fixmee-mode)) 
  (use-package button-lock 
    :diminish button-lock-mode) 
#+END_SRC 
** TODO flycheck                                                       
                                                                       
[[https://github.com/yasuyk/helm-flycheck][helm-flycheck]] показ ошибок flycheck с помощью helm.
                                                                       
#+BEGIN_SRC emacs-lisp                                                 
    (use-package flycheck                                              
      :straight t                                                        
      :defer t                                                         
      :config                                                          
      (add-hook 'prog-mode-hook 'flycheck-mode)                        
      (add-hook 'go-mode-hook 'flycheck-mode)
      (add-hook 'sgml-mode 'flycheck-mode))                            
      ;; (use-package helm-flycheck                                    
      ;;   :straight t                                                   
      ;;   :ensure helm                                                
      ;;   :commands helm-flycheck))                                   
#+END_SRC 
** git-modes

   [[https://github.com/magit/git-modes][Git modes]] GNU Emacs режимы для файлов связанных с Git.
   Доступен в репозитории на GitHub, но также доступен как независимый пакет в Melpa.

#+BEGIN_SRC emacs-lisp
  (use-package gitconfig-mode
    :straight t
    :defer t)
  (use-package gitignore-mode
    :straight t
    :defer t)
  (use-package gitattributes-mode
    :straight t
    :defer t)
#+END_SRC

** git-timemachine

Use [[https://github.com/pidu/git-timemachine][git-timemachine]] для просмотра истории версий файла.
=p= (предыдущая) и =n= (следующая).

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :straight t
    :commands git-timemachine
    :config
    (progn
      (bind-keys :map git-timemachine-mode
                 ("c" . git-timemachine-show-current-revision)
                 ("b" . git-timemachine-switch-branch))
      (when (straight-use-package 'hydra)
          (bind-keys :map git-timemachine-mode
                  ("\\" . hydra-timemachine/body))
                  (defhydra hydra-timemachine (:hint nil :color blue)
                  "
                                                                          ╭──────────────────┐
                Rev.   Do                                                 │ Git time-machine │
              ╭───────────────────────────────────────────────────────────┴──────────────────╯
                _n_      [_w_] abbrv hash
                ^↑^      [_W_] full hash
                ^|^      [_g_] go to revision
                ^↓^      [_c_] show current
                _p_      [_b_] switch branch
                ^ ^      [_q_] quit
              --------------------------------------------------------------------------------
                  "
                  ("\\" hydra-master/body "back")
                  ("<ESC>" nil "quit")
                  ("q"       git-timemachine-quit)
                  ("n"       git-timemachine-show-next-revision)
                  ("p"       git-timemachine-show-previous-revision)
                  ("g"       git-timemachine-show-nth-revision)
                  ("c"       git-timemachine-show-current-revision)
                  ("w"       git-timemachine-kill-abbreviated-revision)
                  ("W"       git-timemachine-kill-revision)
                  ("b"       git-timemachine-switch-branch)))
		(defadvice git-timemachine-mode (after toggle-evil activate)
		  "Отключаем `evil-local-mode' если включен `git-timemachine-mode',
		  и включаем его обратно при выключении `git-timemachine-mode'."
		  (evil-local-mode (if git-timemachine-mode -1 1)))))
#+END_SRC

** graphviz-dot-mode

[[https://github.com/ppareit/graphviz-dot-mode][graphviz-dot-mode]] режим для языка DOT, с использованием graphviz.

#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :straight t
    :defer t
    :config
    (setq graphviz-dot-indent-width 4))
#+END_SRC

** hydra

[[https://github.com/abo-abo/hydra][Hydra]] пакет GNU Emacs, который может использоваться для привязки команд в семейство горячих клавиш
с общим префиксом - Hydra.

Я использую его в качестве общего интерфейса для наиболее часто используемых
команд в моём рабочем процессе. Он основан на предыдущей идее, которую я
реализовывал в Vim с Unite, чтобы генерировать меню, в котором наиболее полезные
команды отображались с помощью привязки клавиш для их активации. В то же время
Unite работал в качестве интерфейса для нескольких из этих команд.

В Emacs способ добиться такого же поведения иной потому, что благодаря многим
разработчикам мы имеем две роли, которые Unite предпочитал разделять в моей
конфигурации Vim на два отдельных способа:

+ Командный интерфейс:
  Я использую наиболее подходящий для этого пакет - Ivy. Это эквивалент Unite в
  Vim. Он работает в качестве основы для автодополнения и выбора для многих
  команд и задач Emacs. Пока я не использую его на полную мощь, но думаю, что
  буду применять в большом количестве задач.

+ Меню:
  Вначале, имитируя проект [[https://github.com/syl20bnr/spacemacs][Spacemacs]], я использовал комбинации =evil-leader= и =guide-key=
  для создания меню. Но при этом всплывали некоторые глюки и я не хочу
  использовать активный Evil во всех буферах. После появилась Hydra и с первого
  момента я понял, что она решает практически любую проблему, которая была в
  предыдущей настройке. Она может использоваться по всему Emacs и она более
  настраиваемая и более ориентированная к моей первоначальной цели.

Я использую Hydra двумя способами:

+ Активация через "\", для вызова всех основных и пакетных меню. Используя его,
  а иногда команду =counsel-descbinds= (C-h b), я могу видеть и запоминать все
  наиболее полезные команды и привязки клавиш, которые есть в моём распоряжении
  и это очень удобно. Больше не тратится времени на попытки вспомнить комбинации.

+ Активация через "," для работы в качестве Evil leader key (только когда активен
  Evil) для доступа к меню общих задач, которые мне нужны когда я редактирую
  текст (например комментирую область).
  
Я всё ещё предпочитаю "язык" Evil, поэтому многие команды и пакеты
сконфигурированы таким образом.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :straight t
    :defer 0.1
    :init
    (bind-key "\\" 'hydra-master/body)
    :config
    (setq lv-use-separator t)
    (set-face-attribute 'hydra-face-blue nil :foreground "deep sky blue" :weight 'bold)

    (eval-and-compile
      (defhydra hydra-common (:color blue)
        ("<ESC>" nil "quit")))

    (defhydra hydra-master (:color blue :idle 0.4)
      "
                                                                         ╭───────┐
                                                                         │ Index │
  ╭──────────────────────────────────────────────────────────────────────┴───────╯
    [_a_] bookmarks    [^h^]               [_o_] organization  [^v^]
    [_b_] buffers      [_i_] интернет      [_p_] project       [_w_] window
    [_c_] flycheck     [_j_] jump          [_q_] exit          [_x_] shell
    [_d_] development  [_k_] spell         [_r_] register      [^y^]
    [_e_] emacs        [_l_] lisp          [_s_] поиск         [^z^]
    [_f_] file         [_m_] media         [_t_] text
    [_g_] git          [_n_] narrow        [^u^]
  --------------------------------------------------------------------------------
      "
      ("<SPC>" antares-alternate-buffers "альтернативный буфер")
      ("<ESC>" nil "выход")
      ("\\" (insert "\\") "\\")
      ("a"     hydra-bookmarks/body nil)
      ("b"     hydra-buffers/body nil)
      ("c"     hydra-flycheck/body nil)
      ("d"     hydra-development/body nil)
      ("e"     hydra-emacs/body nil)
      ("f"     hydra-file/body nil)
      ("g"     hydra-git/body nil)
      ("i"     hydra-internet/body nil)
      ("j"     hydra-jump/body nil)
      ("k"     hydra-spell/body nil)
      ("l"     hydra-lisp/body nil)
      ("m"     hydra-media/body nil)
      ("n"     hydra-narrow/body nil)
      ("o"     hydra-organization/body nil)
      ("p"     hydra-project/body nil)
      ("q"     hydra-exit/body nil)
      ("r"     hydra-register/body nil)
      ("s"     hydra-search/body nil)
      ("t"     hydra-text/body nil)
      ;; ("v"     hydra-games/body nil)
      ("w"     ace-window nil)
      ("x"     hydra-system/body nil))

    (defhydra hydra-bookmarks (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                     ╭───────────┐
         List                          Do                            │ Bookmarks │
  ╭──────────────────────────────────────────────────────────────────┴───────────╯
    [_l_] list bookmarks            [_j_] jump to a bookmark
     ^ ^                            [_m_] set bookmark at point
     ^ ^                            [_s_] save bookmarks
  --------------------------------------------------------------------------------
      "
      ("j" bookmark-jump)
      ("l" list-bookmarks)
      ("m" bookmark-set)
      ("s" bookmark-save))

    (defhydra hydra-buffers (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                       ╭─────────┐
    Switch                 Do                                          │ Buffers │
  ╭────────────────────────────────────────────────────────────────────┴─────────╯
    [_b_] switch             [_d_] kill the buffer
    [_i_] ibuffer            [_r_] toggle read-only mode
    [_a_] alternate          [_u_] revert buffer changes
     ^ ^                     [_w_] save buffer
  --------------------------------------------------------------------------------
      "
      ("a" antares-alternate-buffers)
      ("b" ivy-switch-buffer)
      ("d" kill-this-buffer)
      ("i" ibuffer)
      ("r" read-only-mode)
      ("u" antares-revert-buffer)
      ("w" save-buffer))

      (defhydra hydra-flycheck (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                      ╭──────────┐
     Navigate          Show Errors                  Do                │ Flycheck │
  ╭───────────────────────────────────────────────────────────────────┴──────────╯
     ^_p_^revious     [_l_] list errors           [_t_] toggle Flycheck
        ^^↑^^         [_d_] clear all errors      [_c_] select checker
      ^_f_^irst        ^ ^                        [_r_] run via compile
        ^^↓^^          ^ ^                        [_h_] describe checker
      ^_n_^ext
  --------------------------------------------------------------------------------
        "
        ("c" flycheck-select-checker)
        ("h" flycheck-describe-checker)
        ("d" flycheck-clear)
        ("f" flycheck-first-error)
        ("l" flycheck-list-errors)
        ("n" flycheck-next-error :color red)
        ("p" flycheck-previous-error :color red)
        ("r" flycheck-compile)
        ("t" flycheck-mode))

      (defhydra hydra-development (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                   ╭─────────────┐
       Code                   Web                 Quickrun         │ Development │
  ╭────────────────────────────────────────────────────────────────┴─────────────╯
    [_d_] search docs (at point) [_c_] Web Colors          [_q_] buffer
     ^ ^                         [_h_] HTTP header         [_v_] region
     ^ ^                         [_m_] HTTP method         [_x_] shell
     ^ ^                         [_r_] HTTP relation       [_p_] with arg
     ^ ^                         [_s_] HTTP status code    [_o_] only compile
     ^ ^                         [_t_] Media types         [_R_] replace
     ^ ^                         [_g_] RESTclient          [_e_] eval/print
     ^ ^                         [_f_] RFC doc             
    [_l_] lines of code          [_F_] RFC index           
  --------------------------------------------------------------------------------
        "
        ("d" devdocs-search)
        ("c" counsel-colors-web)
        ("g" restclient-mode)
        ("f" irfc-visit)
        ("F" irfc-index)
        ("q" quickrun)
        ("v" quickrun-region)
        ("x" quickrun-shell)
        ("p" quickrun-with-arg)
        ("o" quickrun-compile-only)
        ("R" quickrun-replace-region)
        ("e" quickrun-eval-print)
        ("h" http-header)
        ("m" http-method)
        ("r" http-relation)
        ("s" http-status-code)
        ("t" media-type)
        ("l" cloc))

    (defhydra hydra-emacs (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                         ╭───────┐
     Execute       Packages         Help                     Misc        │ Emacs │
  ╭──────────────────────────────────────────────────────────────────────┴───────╯
    [_x_] counsel M-x [_p_] list      [_f_] describe function [_t_] change theme
     ^ ^              [_i_] install   [_v_] describe variable [_l_] list emacs process
     ^ ^              [_u_] upgrade   [_m_] info manual       [_c_] init time
     ^ ^               ^ ^            [_k_] bindings          [_e_] benchmark init
     ^ ^               ^ ^            [_b_] personal bindings [_o_] unbound commands 
     ^ ^               ^ ^             ^ ^                    [_y_] emacs colors
     ^ ^               ^ ^             ^ ^                    [_z_] list faces
  --------------------------------------------------------------------------------
        "
        ("C-h b" counsel-descbinds "bindings")
        ("f" counsel-describe-function)
        ("v" counsel-describe-variable)
        ("b" describe-personal-keybindings)
        ("c" emacs-init-time)
        ("i" package-install)
        ("k" counsel-descbinds)
        ("l" list-processes)
        ("m" info-display-manual)
        ("p" paradox-list-packages)
        ("t" counsel-load-theme)
        ("u" paradox-upgrade-packages)
        ("e" esup)
        ("o" smex-show-unbound-commands)
        ("y" counsel-colors-emacs)
        ("z" counsel-faces)
        ("x" counsel-M-x))

    (defhydra hydra-file (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                          ╭──────┐
       Ivy                    Dired        Ztree                          │ File │
  ╭───────────────────────────────────────────────────────────────────────┴──────╯
    [_o_] open file        [_d_] dired         [_z_] diff dirs
    [_e_] open file extern [_r_] ranger
  --------------------------------------------------------------------------------
        "
        ("o" counsel-find-file)
        ("e" counsel-find-file-extern)
        ("z" ztree-diff)
        ("d" dired)
        ("r" ranger))


    (defhydra hydra-text (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                          ╭──────┐
   Size  Toggle              Unicode                        Do            │ Text │
  ╭───────────────────────────────────────────────────────────────────────┴──────╯
    _k_  [_f_] fill column     [_d_] unicode character           [_a_] align with regex
    ^↑^  [_h_] hidden chars    [_e_] evil digraphs table         [_w_] remove trailing ' '
    ^ ^  [_l_] line numbers    [_s_] specific code block         [_n_] count words
    ^↓^  [_t_] trailing ' '    [_u_] unicode character           [_i_] lorem ipsum
    _j_  [_v_] font space      [_p_] character code              [_x_] comment box
    ^ ^  [_c_] comment          ^ ^                              [_q_] boxquote
    ^ ^  [_b_] multibyte chars  ^ ^                              [_m_] iedit (multiple)
    ^ ^   ^ ^                   ^ ^                              [_r_] expand region
    ^ ^   ^ ^                   ^ ^                              [_U_] tabs to spaces
  --------------------------------------------------------------------------------
        "
        ("a" align-regexp)
        ("b" toggle-enable-multibyte-characters)
        ("c" comment-line)
        ("d" insert-char)
        ("e" evil-ex-show-digraphs)
        ("f" fci-mode)
        ("h" whitespace-mode)
        ("i" lorem-ipsum-insert-paragraphs)
        ("k" text-scale-increase :color red)
        ("j" text-scale-decrease :color red)
        ("l" linum-mode)
        ("n" count-words)
        ("m" iedit)
        ("p" describe-char)
        ("r" er/expand-region)
        ("s" charmap)
        ("t" antares-toggle-show-trailing-whitespace)
        ("u" counsel-unicode-char)
        ("v" variable-pitch-mode)
        ("w" whitespace-cleanup)
        ("U" untabify)
        ("q" hydra-boxquote/body)
        ("x" comment-box))

    (defhydra hydra-git (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                           ╭─────┐
     Magit                          VC                    Timemachine      │ Git │
  ╭────────────────────────────────────────────────────────────────────────┴─────╯
    [_s_] status              [_d_] diffs between revisions  [_t_] timemachine
    [_B_] blame mode          [_b_] edition history
    [_l_] file log
  --------------------------------------------------------------------------------
        "
        ("B" magit-blame-mode)
        ("b" vc-annotate)
        ("d" vc-diff)
        ("l" magit-file-log)
        ("s" magit-status)
        ("t" git-timemachine))

    (defhydra hydra-internet (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                      ╭──────────┐
      Browse       Search              Social               Post      │ Internet │
  ╭───────────────────────────────────────────────────────────────────┴──────────╯
    [_w_] eww      [_b_] DuckDuckGo       [_f_] elfeed            [_i_] imgur
    [_u_] url      [_e_] DuckDuckGo (eww) [_x_] stack overflow
     ^ ^           [_m_] google maps     
     ^ ^           [_d_] wordnik         
  --------------------------------------------------------------------------------
        "
        ("w" eww)
        ("u" browse-url-at-point)
        ("b" (antares-duckduckgo-search t))
        ("e" (antares-duckduckgo-search nil))
        ("m" google-maps)
        ("d" define-word-at-point)
        ("f" elfeed)
        ("x" sx-tab-newest)
        ("i" imgur-post))

    (defhydra hydra-jump (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                          ╭──────┐
    Window          Word/Char        Line         iSearch                 │ Jump │
  ╭───────────────────────────────────────────────────────────────────────┴──────╯
    [_w_] jump        [_j_] word         [_l_] jump     [_i_] jump
    [_d_] close       [_p_] all words    [_y_] copy
    [_z_] maximize    [_b_] subword      [_m_] move
    [_s_] swap        [_c_] char         [_v_] copy region
     ^ ^              [_a_] two chars
  --------------------------------------------------------------------------------
        "
        ("w" ace-window)
        ("d" ace-delete-window)
        ("z" ace-maximize-window)
        ("s" ace-swap-window)
        ("j" avy-goto-word-1)
        ("p" avy-goto-word-0)
        ("b" avy-goto-subword-0)
        ("c" avy-goto-char)
        ("a" avy-goto-char-2)
        ("l" avy-goto-line)
        ("y" avy-copy-line)
        ("m" avy-move-line)
        ("v" avy-copy-region)
        ("i" avy-isearch))

    (defhydra hydra-spell (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                         ╭───────┐
      Flyspell               Ispell                      Gtranslate      │ Spell │
  ╭──────────────────────────────────────────────────────────────────────┴───────╯
    [_k_] correct word       [_w_] check word            [_g_] en ⇆ ru
    [_n_] next error         [_t_] toggle dictionary     [_G_] any lang
    [_f_] toggle flyspell    [_d_] change dictionary
    [_p_] toggle prog mode
  --------------------------------------------------------------------------------
        "
        ("w" ispell-word)
        ("d" ispell-change-dictionary)
        ("t" antares-switch-dictionary)
        ("g" google-translate-smooth-translate)
        ("G" google-translate-query-translate)
        ("f" flyspell-mode)
        ("p" flyspell-prog-mode)
        ("k" flyspell-correct-word-generic)
        ("n" flyspell-goto-next-error))

    (defhydra hydra-lisp (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                          ╭──────┐
      Elisp              Bug hunter                                       │ Lisp │
  ╭───────────────────────────────────────────────────────────────────────┴──────╯
    [_r_] eval region    [_f_] file
    [_s_] eval sexp      [_i_] init-file
    [_b_] eval buffer
  --------------------------------------------------------------------------------
        "
        ("f" bug-hunter-file)
        ("i" bug-hunter-init-file)
        ("r" eval-region)
        ("b" eval-buffer)
        ("s" eval-last-sexp))

    (defhydra hydra-narrow (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                        ╭────────┐
      Narrow                                                            │ Narrow │
  ╭─────────────────────────────────────────────────────────────────────┴────────╯
    [_f_] narrow to defun
    [_p_] narrow to page
    [_r_] narrow to region
    [_w_] widen
  --------------------------------------------------------------------------------
        "
        ("f" narrow-to-defun)
        ("p" narrow-to-page)
        ("r" narrow-to-region)
        ("w" widen))

    (defhydra hydra-project (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                    ╭────────────┐
    Files             Search          Buffer             Do         │ Projectile │
  ╭─────────────────────────────────────────────────────────────────┴────────────╯
    [_f_] file          [_a_] ag          [_b_] switch         [_g_] magit
    [_l_] file dwim     [_A_] grep        [_v_] show all       [_p_] commander
    [_r_] recent file   [_s_] occur       [_V_] ibuffer        [_i_] info
    [_d_] dir           [_S_] replace     [_K_] kill all
    [_o_] other         [_t_] find tag
    [_u_] test file     [_T_] make tags
    [_h_] root
                                                                        ╭────────┐
    Other Window      Run             Cache              Do             │ Fixmee │
  ╭──────────────────────────────────────────────────╯ ╭────────────────┴────────╯
    [_F_] file          [_U_] test        [_kc_] clear         [_x_] TODO & FIXME
    [_L_] dwim          [_m_] compile     [_kk_] add current   [_X_] toggle
    [_D_] dir           [_c_] shell       [_ks_] cleanup
    [_O_] other         [_C_] command     [_kd_] remove
    [_B_] buffer
  --------------------------------------------------------------------------------
        "
        ("a"   projectile-ag)
        ("A"   projectile-grep)
        ("b"   projectile-switch-to-buffer)
        ("B"   projectile-switch-to-buffer-other-window)
        ("c"   projectile-run-async-shell-command-in-root)
        ("C"   projectile-run-command-in-root)
        ("d"   projectile-find-dir)
        ("D"   projectile-find-dir-other-window)
        ("f"   projectile-find-file)
        ("F"   projectile-find-file-other-window)
        ("g"   projectile-vc)
        ("h"   projectile-dired)
        ("i"   projectile-project-info)
        ("kc"  projectile-invalidate-cache)
        ("kd"  projectile-remove-known-project)
        ("kk"  projectile-cache-current-file)
        ("K"   projectile-kill-buffers)
        ("ks"  projectile-cleanup-known-projects)
        ("l"   projectile-find-file-dwim)
        ("L"   projectile-find-file-dwim-other-window)
        ("m"   projectile-compile-project)
        ("o"   projectile-find-other-file)
        ("O"   projectile-find-other-file-other-window)
        ("p"   projectile-commander)
        ("r"   projectile-recentf)
        ("s"   projectile-multi-occur)
        ("S"   projectile-replace)
        ("t"   projectile-find-tag)
        ("T"   projectile-regenerate-tags)
        ("u"   projectile-find-test-file)
        ("U"   projectile-test-project)
        ("v"   projectile-display-buffer)
        ("V"   projectile-ibuffer)
        ("X"   fixmee-mode)
        ("x"   fixmee-view-listing))

    (defhydra hydra-exit (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                          ╭──────┐
     Quit                                                                 │ Exit │
  ╭───────────────────────────────────────────────────────────────────────┴──────╯
    [_c_] exit emacs (standalone or client)
    [_s_] shutdown the emacs daemon
  --------------------------------------------------------------------------------
        "
        ("c" save-buffers-kill-terminal)
        ("s" save-buffers-kill-emacs))

    (defhydra hydra-register (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                      ╭──────────┐
     Logs                        Registers                Undo        │ Register │
  ╭───────────────────────────────────────────────────────────────────┴──────────╯
    [_c_] commands history       [^e^] emacs registers    [_u_] undo tree
    [_o_] messages               [_r_] evil registers
    [_l_] lossage (keystrokes)   [_m_] evil marks
    [_d_] diff buffer with file  [_k_] kill ring
  --------------------------------------------------------------------------------
        "
        ("d" antares-diff-buffer-with-file)
        ("k" counsel-yank-pop)
        ("l" view-lossage)
        ("c" counsel-command-history)
        ("m" evil-show-marks)
        ("o" view-echo-area-messages)
        ("r" evil-show-registers)
        ("u" undo-tree-visualize))

    (defhydra hydra-search (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                        ╭────────┐
     Files                             Buffer                           │ Search │
  ╭─────────────────────────────────────────────────────────────────────┴────────╯
    [_a_] regex search (Ag)           [_b_] by word
    [_r_] regex search (rg)           [_o_] by word (opened buffers)
    [_p_] regex search (pt)           [_w_] by word (multi)
    [_g_] regex search (grep)         [_h_] by word (grep or swiper)
    [^f^] find                        [_t_] tags & titles
    [_l_] locate                      [_s_] semantic 
  --------------------------------------------------------------------------------
        "
        ("a" (let ((current-prefix-arg "-."))
               (call-interactively 'counsel-ag)))
        ("r" (let ((current-prefix-arg "-."))
               (call-interactively 'counsel-rg)))
        ("p" (let ((current-prefix-arg "-."))
               (call-interactively 'counsel-pt)))
        ("g" rgrep)
        ("l" counsel-locate)
        ("b" swiper)
        ("o" swiper-all)
        ("h" counsel-grep-or-swiper)
        ("t" counsel-imenu)
        ("s" counsel-semantic)
        ("w" swiper-multi))

    (defhydra hydra-system (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                        ╭────────┐
     Terminals                     System                               │ System │
  ╭─────────────────────────────────────────────────────────────────────┴────────╯
    [_s_] new multi-term           [_c_] shell command
    [_n_] next multi-term          [_a_] aync shell command
    [_p_] previous multi-term      [_m_] man page
    [_d_] dedicated multi-term     [_l_] list system process
    [_e_] eshell
  --------------------------------------------------------------------------------
        "
        ("a" async-shell-command)
        ("c" shell-command)
        ("e" eshell)
        ("m" man)
        ("l" proced)
        ("s" multi-term)
        ("n" multi-term-next)
        ("p" multi-term-previous)
        ("d" multi-term-dedicated-toggle))

    (defhydra hydra-media (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                         ╭───────┐
     Mingus              Mpd                     Volume                  │ Media │
  ╭──────────────────────────────────────────────────────────────────────┴───────╯
   [_m_] mingus         [_n_] next song          [_-_] volume down
   [_f_] search         [_p_] previous song      [_+_] volume up
   [_l_] playlist       [_c_] clear playlist
   [_a_] All            [_t_] pause
    ^ ^                 [_s_] stop
    ^ ^                 [_d_] start daemon
  --------------------------------------------------------------------------------
        "
        ("m" mingus)
        ("f" mingus-search)
        ("c" mingus-clear)
        ("n" mingus-next)
        ("p" mingus-prev)
        ("t" mingus-toggle)
        ("s" mingus-stop)
        ("d" mingus-start-daemon)
        ("l" mingus-load-playlist)
        ("a" mingus-load-all)
        ("-" mingus-vol-down)
        ("\+" mingus-vol-up))

    (defhydra hydra-organization (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
        "
                                                                  ╭──────────────┐
       Tasks            Org mode               Comms      Others  │ Organization │
  ╭───────────────────────────────────────────────────────────────┴──────────────╯
    [_a_] agenda      [_c_] capture             [_m_] почта      [_x_] speed type
    [_l_] agenda list [_p_] pomodoro            [_t_] контакты
    [_d_] календарь   [_s_] search headings     [_h_] add location
     ^ ^              [_g_] open location gmaps
     ^ ^              [_f_] archive subtree
  --------------------------------------------------------------------------------
        "
        ("a" org-agenda)
        ("c" org-capture)
        ("s" counsel-org-agenda-headlines)
        ("d" cfw:open-org-calendar)
        ("g" org-location-google-maps)
        ("h" org-address-google-geocode-set)
        ("l" org-agenda-list)
        ("f" org-archive-subtree)
        ("m" mu4e)
        ("p" org-pomodoro)
        ("t" org-contacts)
        ("x" speed-type-text))

     (defhydra hydra-leader ( :color blue :hint nil :idle 0.4)
         "
                                                                        ╭───────┐
     Переключить                   Сделать                              │ Лидер │
  ╭─────────────────────────────────────────────────────────────────────┴───────╯
    [_c_] comment                  [_a_] align with regex
    [_f_] fill column              [_p_] показать код символа
    [_h_] непечатуемые символы     [_i_] вставить символ unicode
    [_e_] trailing whitespace      [_<SPC>_] remove trailing whitespaces
    [_v_] font space               [_u_] дерево отмен
     ^ ^                           [_j_] jump word
     ^ ^                           [_x_] comment box
     ^ ^                           [_r_] expand region
     ^ ^                           [_m_] iedit (multiple edit)
     ^ ^                           [_g_] google translate
     ^ ^                           [_s_] swiper
     ^ ^                           [_t_] counsel imenu
     ^ ^                           [_q_] quick-calc
  -------------------------------------------------------------------------------
        "
        ("<escape>" nil "выход")
        ("a" align-regexp)
        ("c" comment-lines)
        ("r" er/expand-region)
        ("f" fci-mode)
        ("g" google-translate-smooth-translate)
        ("h" whitespace-mode)
        ("i" counsel-unicode-char)
        ("j" avy-goto-word-1)
        ("m" iedit-mode)
        ("n" count-words)
        ("p" describe-char)
        ("e" antares-toggle-show-trailing-whitespace)
        ("u" undo-tree-visualize)
        ("v" variable-pitch-mode)
        ("<SPC>" whitespace-cleanup)
        ("s" antares-swiper)
        ("t" counsel-imenu)
        ("q" (quick-calc t))
        ("x" comment-box)))
#+END_SRC

** ledger-mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :straight t
    :init
    (setq ledger-clear-whole-transactions 1)
    :config
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    :mode "\\.ledger\\'")
#+END_SRC
** magit

С помощью [[https://github.com/magit/magit][Magit]], вы можете просматривать и редактировать свои репозитории Git с помошью Emacs.
Вы , например, можете просмотреть и закоммитить изменения, внесённые в
отслеживаемые файлы, а также просмотреть историю последних изменений. Есть
поддержка cherry picking, откатов, мерджей, ребэйзов и прочих общих операций Git.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :commands magit-status)
#+END_SRC

** mingus                                                              

#+BEGIN_SRC emacs-lisp
  (use-package mingus
    :straight t
    :config
    (use-package mingus-stays-home))
#+END_SRC
** NeoTree
[[./img/neotree.png]]
[[https://github.com/jaypei/emacs-neotree][NeoTree]] это аналог NerdTree (менеджера файлов) в Vim.
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :straight t
    :after (all-the-icons)
    :config
    (progn
      (setq
        neo-theme (if (display-graphic-p) 'icons 'arrow))
      (setq
        neo-smart-open t)))
  (global-set-key [f8] 'neotree-toggle)
#+END_SRC

** org-bullets

[[https://github.com/sabof/org-bullets][org-bullets]] показать org-mode маркеры как UTF-8 символы.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :straight t
    :config
    (setq org-bullets-bullet-list '("◉" "○" "✸" "✿" "☼" "⚬"))
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** TODO paradox

[[https://github.com/Bruce-Connor/paradox][Paradox]] проект модернизации Emacs'овского меню пакетов. С оценками пакетов,
статистикой использования, настраиваемостью и многим другим.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package paradox
    :straight t
    :commands paradox-list-packages
    :config
    (setq paradox-github-token t
          paradox-automatically-star nil
          paradox-execute-asynchronously t))
#+END_SRC

** popwin

[[https://github.com/m2ym/popwin-el][Popwin]] это менеджер всплывающих окон Emacs, который освобождает вас от ада раздражающих буферов,
таких как *Help*, *Completions*, *compilation*, и так далее.

#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :straight t
    :config
    (popwin-mode 1)
    (setq popwin:popup-window-height 35
          display-buffer-function 'popwin:display-buffer
          popwin:special-display-config
          '(("*Miniedit Help*" :noselect t)
            (help-mode :noselect nil)
            (completion-list-mode :noselect t)
            (compilation-mode :noselect nil)
            (grep-mode :noselect t)
            (occur-mode :noselect t)
            ("*Pp Macroexpand Output*" :noselect t)
            ("*Shell Command Output*")
            ("*Async Shell Command*")
            ("*vc-diff*")
            ("*vc-change-log*")
            (" *undo-tree*" :width 60 :position right)
            ("^\\*anything.*\\*$" :regexp t)
            ("*slime-apropos*")
            ("*slime-macroexpansion*")
            ("*slime-description*")
            ("*slime-compilation*" :noselect t)
            ("*slime-xref*")
            ("*Flycheck errors*")
            ("^\\*go-direx:" :regexp t :position left :width 0.4 :dedicated t :stick t)
            ("*Warnings*")
            ("*Error*")
            ("*Process List*")
            ("*Smex: Unbound Commands*")
            ("*Paradox Report*" :noselect nil)
            ("*Package Commit List*" :noselect nil)
            ("*Diff*" :noselect nil)
            ("*Messages*" :noselect nil)
	    ("*straight-proccess*" :noselect nil)
            ("*Google Maps*" :noselect nil)
            ("*ag search*" :noselect nil)
            ("*PDF-Occur*" :noselect nil)
            ("*PDF-Metadata*" :noselect nil)
            ("^\\*Outline .*\\.pdf\\*$" :regexp t :noselect nil)
            ("*MULTI-TERM-DEDICATED*" :noselect nil :stick t)
            (sldb-mode :stick t)
            (slime-repl-mode)
            (slime-connection-list-mode)))

    (add-hook 'popwin:after-popup-hook 'turn-off-evil-mode)
    (bind-keys :map popwin:window-map
               ((kbd "<escape>") . popwin:close-popup-window)))
#+END_SRC

** projectile

[[https://github.com/bbatsov/projectile][Projectile]] библиотека проектного взаимодействия для Emacs.
Цель библиотеки- обеспечение набора функция, работающих на уровне проекта без
внешних зависимостей (по фозможности). Например - поиск файлов проекта имеет
портативную реализацию, написанную на чистом Emacs Lisp, без использования GUI
поиска (но ради производительности используется внешний механизм индексирования
с помощью внешних команд).

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :config
    (progn
      (setq projectile-cache-file (concat antares-emacs-temporal-directory "projectile.cache"))
      (setq projectile-known-projects-file (concat antares-emacs-temporal-directory "projectile-bookmarks.eld"))
      (setq projectile-enable-caching t)
      (projectile-global-mode)))
#+END_SRC

** ranger
 [[https://github.com/ralesi/ranger.el][Ranger]] is a minor mode that runs within dired emulating many of the features of
 [[https://github.com/ralesi/ranger.el][ranger]]. This minor mode shows a stack of the parent directories and updates the
 parent buffers while navigating the file system. 

#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :straight t
    :config
    (setq ranger-cleanup-on-disable t
          ranger-show-dotfiles t 
          ranger-show-literal nil))
#+END_SRC

** swiper & ivy & counsel

[[https://github.com/abo-abo/swiper][Ivy]] is a generic completion mechanism for Emacs that aims to be more efficient,
smaller, simpler, and smoother to use yet highly customizable. 

[[https://github.com/abo-abo/swiper][Swiper]] is a package for GNU Emacs that gives you an overview as you search for a
regex. Based in ivy.

[[https://github.com/abo-abo/swiper][Counsel]] provides versions of common Emacs commands that are customised to make
the best use of ivy.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :straight t
    :straight smex
    :straight ivy-hydra
    :diminish ivy-mode
    :config
    (setq smex-save-file (concat antares-emacs-temporal-directory "smex-items"))
    (smex-initialize)
    (setq ivy-use-virtual-buffers t
          ivy-height 15)
    (bind-keys :map ivy-minibuffer-map
               ("<escape>" . minibuffer-keyboard-quit))
    (ivy-mode t))

  (use-package swiper
      :straight t
      :config
      (defun antares-swiper ()
          (interactive)
          (swiper)
          (add-to-list 'regexp-search-ring (ivy--regex ivy-text))))

  (use-package counsel
    :bind (("<menu>"  . counsel-M-x)
           ("C-h b" . counsel-descbinds))
    :straight t
    :config
    (setq counsel-ag-base-command "ag --nocolor --nogroup --smart-case --column %s"))
#+END_SRC

** Telega
#+BEGIN_SRC emacs-lisp
  (use-package telega
    :straight t
    ;;:load-path  "~/telega.el"
    :commands (telega)
    :defer t)
#+END_SRC
** Undo-tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :straight t
  :diminish undo-tree-mode
  :init
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/tmp/undo"))
          undo-tree-auto-save-history t
          undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t)))
#+END_SRC

* Footnotes

[fn:1] Логотип Emacs взят с [[http://th.nao.ac.jp/MEMBER/zenitani/emacs-e.html][Carbon Emacs Package]] и предоставлен под лицензией
GPL-3.0. Автор оригинала [[https://github.com/nanasess][Kentaro Ohkouchi]].
